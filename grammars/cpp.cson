'scopeName': 'source.cpp'
'name': 'C++14'

'fileTypes': [
    'cpp'
    'h'
    'hpp'
]

# control keywords
'patterns': [{
# preprocessor
  'begin': '(?=#)'
  'end': '\\n'
  'name': 'meta.preprocessor'

  # keywords
  'patterns': [{
    'include': '#line-comment'
  },

  {
    'include': '#block-comment'
  },

  {
    'include': '#numeric-literals'
  },

  {
    'include': '#language-constants'
  },

  {
    'match': '#\\s*(define|elif|else|endif|error|if|ifdef|ifndef|include|line|pragma|undef|warning)\\b'
    'name': 'keyword.control'
  },

  # quotes highlight (e.g. #include "math.h")
  {
    'begin': '"'
    'end': '"|\\n'
    'name': 'string.quoted.other'
  },

  # angle brackets highlight (e.g. #include <cmath>)
  {
    'begin': '<'
    'end': '>|\\n'
    'name': 'string.quoted.other'
  }]
},

{
  'include': '#control-keywords'
},

{
  'include': '#after-function'
},

{
  'include': '#deprecated-keywords'
},

{
  'include': '#storage-types'
},

{
  'include': '#storage-modifiers'
},

{
  'include': '#support-types'
},

{
  'include': '#language-variables'
},

{
  'include': '#language-constants'
},

{
  'include': '#block-comment'
},

{
  'include': '#line-comment'
},

{
  'include': '#numeric-literals'
},

{
  'include': '#string'
},

{
  'include': '#char-literals'
},

{
  'include': '#function'
}]

'repository':
  # doxygen keywords
  'doxygen-keywords':
    'match': '[@\\\\](author|authors|brief|class|details|file|note|param|ref|return|returns|struct|todo|tparam)\\b'
    'name':  'comment.block.documentation'

  # line comment
  'line-comment':
    'begin': '(?=//)'
    'end': '\\n'
    'name': 'comment.line.double-slash'
    # doxygen
    'patterns': [{
      # start with "///" or "//!" but not "////"
      'begin': '(?<!/)(?=//(/[^/]|!))'
      'end': '(?=\\n)'
      'name': 'meta.documentation'
      'patterns': [{
          'include': '#doxygen-keywords'
      }]
    }]

  # block comment
  'block-comment':
    'begin': '(?=/\\*)'
    'end': '(?<!/)\\*/'
    'name': 'comment.block'
    # doxygen
    'patterns': [{
      # start with "/**" or "/*!" but not "/***"
      'begin': '(?=/\\*(\\*[^\\*]|!))'
      'end': '(?=\\*/)'
      'name': 'meta.documentation'
      'patterns': [{
          'include': '#doxygen-keywords'
      }]
    }]

  # control keywords
  'control-keywords':
    'match': '\\b(alignas|alignof|and|and_eq|asm|bitand|bitor|break|case|catch|compl|constexpr|const_cast|continue|default|delete|do|dynamic_cast|else|explicit|export|extern|for|friend|goto|if|inline|namespace|new|noexcept|not|not_eq|operator|or|or_eq|private|protected|public|reinterpret_cast|return|sizeof|static_assert|static_cast|switch|throw|try|typedef|typeid|using|virtual|while|xor|xor_eq)\\b'
    'name': 'keyword.control'

  # special identifiers
  'special-identifiers':
    'match': '\\b(?:final|override)\\b'
    'name': 'keyword.control'

  # deprecated keywords
  'deprecated-keywords':
    'match': '\\bregister\\b'
    'name': 'invalid.deprecated'

  # storage types
  'storage-types':
    'match': '\\b(auto|bool|char|char16_t|char32_t|class|decltype|double|enum|float|int|long|short|signed|struct|template|thread_local|typename|union|unsigned|void|wchar_t)\\b'
    'name': 'storage.type'

  # language constants
  'language-constants':
    'match': '\\b(false|nullptr|true)\\b'
    'name': 'constant.language'

  # storage modifiers
  'storage-modifiers':
    'match': '\\b(const|mutable|static|volatile)\\b'
    'name': 'storage.modifier'

  # support types
  'support-types':
    'match': '\\b(int8_t|int16_t|int32_t|int64_t|int_fast8_t|int_fast16_t|int_fast32_t|int_fast64_t|int_least8_t|int_least16_t|int_least32_t|int_least64_t|intmax_t|intptr_t|size_t|uint|uint8_t|uint16_t|uint32_t|uint64_t|uint_fast8_t|uint_fast16_t|uint_fast32_t|uint_fast64_t|uint_least8_t|uint_least16_t|uint_least32_t|uint_least64_t|uintmax_t|uintptr_t)\\b'
    'name': 'support.type'

  # language variables
  'language-variables':
    'match': '\\bthis\\b'
    'name': 'variable.language'

  # numeric literals
  'numeric-literals':
    'match': '\\b((\\d*\\.\\d+|\\d+\\.)[fFlL]?|(([1-9]\\d*|0[0-7]*|0[xX][\\da-fA-F]+)([lL][uU]?|[lL]{2}[uU]?|[uU][lL]{0,2})?))\\b'
    'name': 'constant.numeric'

  # escape chars
  'escape-chars':
    'match': '\\\\(?:[\'"\\?\\\\abfnrtv]|[0-7]{1,3}|x[\\da-fA-F]+|u[\\da-fA-F]{4}|U[\\da-fA-F]{8})'
    'name':  'constant.character.escape'

  # string
  'string':
    'begin': '(?:L|u8|u|U)?"'
    'end': '"'
    'name': 'string.quoted.double'
    'patterns': [{
      'include': '#escape-chars'
    }]

  # char literals
  'char-literals':
    'begin': '(?:L|u|U)?\'' # TODO: C++17: add u8
    'end': '\''
    'name': 'string.quoted.single'
    'patterns': [{
      'include': '#escape-chars'
    }]

  # function
  'function':
    # TODO: add restrictions between angle brackets
    'match': '\\b[_a-zA-Z]\\w*(?=\\s*(<.*>\\s*)?\\()'
    'name': 'entity.name.function'

  # after function
  'after-function':
    'begin': '\\)'
    'end': ';|{'
    'name': 'meta.after-function'
    'patterns': [{
      'include': '#block-comment'
    },
    {
      'include': '#line-comment'
    },
    {
      'include': '#control-keywords'
    },
    {
      'include': '#special-identifiers'
    },
    {
      'include': '#storage-types'
    },
    {
      'include': '#storage-modifiers'
    },
    {
      'include': '#support-types'
    },
    {
      'include': '#language-constants'
    },
    {
      'include': '#language-variables'
    },
    {
      'include': '#numeric-literals'
    },
    {
      'include': '#string'
    },
    {
      'include': '#char-literals'
    },
    {
      'include': '#function'
    }]
