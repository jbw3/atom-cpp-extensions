'scopeName': 'source.cpp'
'name': 'C++14'

'fileTypes': [
    'cpp'
    'h'
    'hpp'
]

# control keywords
'patterns': [{
  'match': '\\b(break|case|catch|const_cast|continue|default|delete|do|dynamic_cast|else|explicit|friend|for|goto|if|inline|namespace|new|operator|private|protected|public|reinterpret_cast|return|sizeof|static_cast|switch|try|typedef|using|virtual|while)\\b'
  'name': 'keyword.control'
},

# preprocessor
{
  'begin': '(?=#)'
  'end': '\\n'
  'name': 'meta.preprocessor'

  # keywords
  'patterns': [{
    'include': '#line-comment'
  },

  {
    'include': '#block-comment'
  },

  {
    'include': '#numeric-literals'
  },

  {
    'include': '#language-constants'
  },

  {
    'match': '#\\s*(define|elif|else|endif|error|if|ifdef|ifndef|include|line|pragma|warning)\\b'
    'name': 'keyword.control'
  },

  # quotes highlight (e.g. #include "math.h")
  {
    'begin': '"'
    'end': '"|\\n'
    'name': 'string.quoted.other'
  },

  # angle brackets highlight (e.g. #include <cmath>)
  {
    'begin': '<'
    'end': '>|\\n'
    'name': 'string.quoted.other'
  }]
},

# storage types
{
  'match': '\\b(auto|bool|char|class|double|enum|float|int|long|short|signed|struct|template|typename|union|unsigned|void)\\b'
  'name': 'storage.type'
},

# support types
{
  'match': '\\b(int8_t|int16_t|int32_t|int64_t|intmax_t|uint|uint8_t|uint16_t|uint32_t|uint64_t|uintmax_t)\\b'
  'name': 'support.type'
},

# storage modifiers
{
  'match': '\\b(const|register|static|volatile)\\b'
  'name': 'storage.modifier'
},

# language variables
{
  'match': '\\bthis\\b'
  'name': 'variable.language'
},

{
  'include': '#language-constants'
},

{
  'include': '#block-comment'
},

{
  'include': '#line-comment'
},

{
  'include': '#numeric-literals'
},

{
  'include': '#string'
}]

'repository':
  # doxygen keywords
  'doxygen-keywords':
    'match': '[@\\\\](author|authors|brief|class|details|file|note|param|ref|return|returns|struct|todo|tparam)\\b'
    'name':  'comment.block.documentation'

  # line comment
  'line-comment':
    'begin': '(?=//)'
    'end': '\\n'
    'name': 'comment.line.double-slash'
    # doxygen
    'patterns': [{
      # start with "///" or "//!" but not "////"
      'begin': '(?<!/)(?=//(/[^/]|!))'
      'end': '(?=\\n)'
      'name': 'meta.documentation'
      'patterns': [{
          'include': '#doxygen-keywords'
      }]
    }]

  # block comment
  'block-comment':
    'begin': '(?=/\\*)'
    'end': '(?<!/)\\*/'
    'name': 'comment.block'
    # doxygen
    'patterns': [{
      # start with "/**" or "/*!" but not "/***"
      'begin': '(?=/\\*(\\*[^\\*]|!))'
      'end': '(?=\\*/)'
      'name': 'meta.documentation'
      'patterns': [{
          'include': '#doxygen-keywords'
      }]
    }]

  # numeric literals
  'numeric-literals':
    'match': '\\b((\\d*\\.\\d+|\\d+\\.)[fFlL]?|(([1-9]\\d*|0[0-7]*|0[xX][\\da-fA-F]+)([lL][uU]?|[lL]{2}[uU]?|[uU][lL]{0,2})?))\\b'
    'name': 'constant.numeric'

  # language constants
  'language-constants':
    'match': '\\b(false|nullptr|true)\\b'
    'name': 'constant.language'

  # string
  'string':
    'begin': '"'
    'end': '"|\\n'
    'name': 'string.quoted.double'
    'patterns': [{
      'match': '\\\\[abnrtvx\'"\\\\]'
      'name':  'constant.character.escape'
    }]
