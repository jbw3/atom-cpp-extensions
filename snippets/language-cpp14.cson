'.source.cpp':
  'cerr':
    'prefix': 'cerr'
    'body': 'std::cerr << $1 << "\\\\n";'

  'cin':
    'prefix': 'cin'
    'body': 'std::cin >> ${1:var};'

  'class':
    'prefix': 'class'
    'body': 'class ${1:Name}\n{\npublic:\n\t${1:Name}(${2:int arg});\n\n\t~${1:Name}()${3: = default};\n\t${1:Name}(const ${1:Name}& other)${4: = default};\n\t${1:Name}(${1:Name}&& other)${5: = default};\n\t${1:Name}& operator=(const ${1:Name}& other)${6: = default};\n\t${1:Name}& operator=(${1:Name}&& other)${7: = default};\n};'

  'cout':
    'prefix': 'cout'
    'body': 'std::cout << $1 << "\\\\n";'

  'do while':
    'prefix': 'do'
    'body': 'do\n{\n\t${2:/* code */}\n} while (${1:/* condition */});'

  'for':
    'prefix': 'for'
    'body': 'for (int ${1:i} = 0; ${1:i} < ${2:n}; ++${1:i})\n{\n\t${3:/* code */}\n}'

  'for iterator':
    'prefix': 'forit'
    'body': 'for (auto ${1:iter} = ${2:list}.begin(); ${1:iter} != ${2:list}.end(); ++${1:iter})\n{\n\t${3:/* code */}\n}'

  'for each':
    'prefix': 'foreach'
    'body': 'for (${1:int} ${2:var} : ${3:list})\n{\n\t${4:/* code */}\n}'

  'function':
    'prefix': 'fn'
    'body': '${1:void} ${2:name}(${3:int arg})\n{\n\t${4:/* code */}\n}'

  'function prototype':
    'prefix': 'fnp'
    'body': '${1:void} ${2:name}(${3:int arg});'

  'if':
    'prefix': 'if'
    'body': 'if (${1:/* condition */})\n{\n\t${2:/* code */}\n}'

  'if ... else':
    'prefix': 'ifelse'
    'body': 'if (${1:/* condition */})\n{\n\t${2:/* code */}\n}\nelse\n{\n\t${3:/* code */}\n}'

  'lambda function':
    'prefix': 'lambda'
    'body': '[${1:=}]($2){${3:/* code */}}'

  'main()':
    'prefix': 'main'
    'body': 'int main(int argc, char* argv[])\n{\n\t${1}\n\n\treturn 0;\n}'

  'struct':
    'prefix': 'struct'
    'body': 'struct ${1:Name}\n{\n\t${2:int member};\n};'

  'switch':
    'prefix': 'switch'
    'body': 'switch (${1:var})\n{\ncase ${2:0}:\n\t${3:/* code */}\n\tbreak;\ndefault:\n\t${4:/* code */}\n\tbreak;\n}'

  'try ... catch':
    'prefix': 'try'
    'body': 'try\n{\n\t${1:/* code */}\n}\ncatch (${2:...})\n{\n\t${3:/* code */}\n}'

  'while':
    'prefix': 'while'
    'body': 'while (${1:/* condition */})\n{\n\t${2:/* code */}\n}'
